# Git 'Er Done!

Version control is a crucial component of any development process, and even more so if you are working in teams. 
It is so important that I will refuse to work on any project before implementing some kind of version control system, 
even if it means I have to maintain it on my own. Not only has it saved my ass countless times, it also facilitates 
and speeds up collaboration for development teams.

[Git](https://git-scm.com/) is my preferred version control system, and after reading this post you will learn:

* How to get your Salesforce code set up in Git
* How to add version control to your work flow
* How you can use Git to facilitate collaboration


## Getting your Salesforce code on to Git

If you don't have Git set up on your machine, check out these two links first:

https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup

Next pull down the metadata that you want to track from your Salesforce production org using whichever method you prefer 
(Mavensmate, Eclipse, [Ant](http://www.socalledprogrammer.com/2015/01/the-ant-jobs-go-marching.html), etc). 
We're using pulling the code from production because it is the source of truth of your org. Even if your sandbox has new 
changes in it, it can be refreshed at any time or never merged into production. Production always takes precedent.

If you're not sure which metadata types you should pull down, I recommend this package.xml file as a default:

```
<?xml version="1.0" encoding="UTF-8"?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
    <types>
        <members>*</members>
        <name>ApexClass</name>
    </types>
    <types>
        <members>*</members>
        <name>ApexComponent</name>
    </types>
    <types>
        <members>*</members>
        <name>ApexPage</name>
    </types>
    <types>
        <members>*</members>
        <name>ApexTrigger</name>
    </types>
    <types>
        <members>*</members>
        <name>StaticResource</name>
    </types>
    <version>32.0</version>
</Package>
```

Developers will be working with these metadata types for a majority of their time and thus these will benefit 
from version control the most.

Once you've pull down your metadata open up Terminal (or Git Bash if you're using Windows) and navigate to the root folder of your.
project. This is typically the folder that holds your **src** folder. 
